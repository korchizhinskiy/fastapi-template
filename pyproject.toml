[tool.poetry]
name = "tuva-integration"
version = "0.1.1"
description = "Integration service for integrate with Practic API."
authors = ["korchizhinskiy <korchizhinskiy@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "3.11.6"
fastapi = "^0.103.2"
celery = "^5.3.4"
sqlalchemy = "^2.0.21"
asyncpg = "^0.28.0"
pydantic-settings = "^2.0.3"
pydantic = "^2.4.2"
uvicorn = "^0.23.2"
redis = "^5.0.1"
flower = "^2.0.1"
alembic = "^1.12.0"
pytest = "^7.4.2"
pytest-asyncio = "^0.21.1"

[tool.poetry.group.dev.dependencies]
isort = "^5.12.0"
black = "^23.9.1"
ruff = "^0.0.292"
pyright = "^1.1.329"
celery-types = "^0.20.0"
lxml-stubs = "^0.4.0"
ipython = "^8.16.1"
pre-commit = "^3.4.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pyright]
venv = ".venv"
venvPath = "."
include = [
    "app",
]
defineConstant = { DEBUG = true }

reportMissingImports = true
reportMissingTypeStubs = true

pythonVersion = "3.11.6"
pythonPlatform = "Linux"

[tool.ruff]
line-length = 120
select = [
 "F", # Pyflakes 
 "E", # Pycodestyle | Error
 "W", # Pycodestyle | Warning
 "C90", # Mccabe 
 "I", # Isort
 "N", # Pep8 naming
 "D", # Pydocstyle
 "UP", # Pyupgrade
 "YTT", # flake8-2020
 "ANN", # flake8-annotations
 "ASYNC", # flake8-async
 "S", # flake8-bandit
 "BLE", # flake8-blind-except
 "FBT", # flake8-boolean-trap
 "B", # flake8-bugbear
 "A", # flake8-builtins
 "COM", # flake8-commas
 "CPY", # flake8-copyright
 "C4", # flake8-comprehensions
 "DTZ", # flake8-datetimez
 "T10", # flake8-debugger
 "DJ", # flake8-django
 "EM", # flake8-errmsg
 "EXE", # flake8-executable
 "FA", # flake8-future-annotations
 "ISC", # flake8-implicit-str-concat
 "ICN", # flake8-import-conventions
 "G", # flake8-logging-format
 "INP", # flake8-no-pep420
 "PIE", # flake8-pie
 "T20", # flake8-print
 "PYI", # flake8-pyi
 "PT", # flake8-pytest-style
 "Q", # flake8-quotes 
 "RSE", # flake8-raise
 "RET", # flake8-return
 "SLF", # flake8-self
 "SLOT", # flake8-slots
 "SIM", # flake8-simplify
 "TID", # flake8-tidy-imports
 "TCH", # flake8-type-checking
 "INT", # flake8-gettext
 "ARG", # flake8-unused-arguments
 "PTH", # flake8-use-pathlib
 "TD", # flake8-todos
 "FIX", # flake8-fixme
 "ERA", # eradicate
 "PD", # pandas-vet
 "PGH", # pygrep-hooks
 "PL", # Pylint
 "TRY", # tryceratops
 "FLY", # flynt
 "NPY", # NumPy-specific rules
 "AIR", # Airflow
 "PERF", # Perflint
 "FURB", # refurb
 "LOG", # flake8-logging
 "RUF", # Ruff-specific rules
]

fixable = ["ALL"]

ignore = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D106", # Missing docstring in public nested class  
  "D107", # Missing docstring in __init__
  "ANN101", # Missing type annotation for `self` in method
  "D203", # 1 blank line required before class docstring
  "ANN101", # Missing type annotation for `self` in method
  "ANN102", # Missing type annotation for `cls` in classmethod
  "FIX002", # Line contains TODO, consider resolving the issue
  "TD003", # Missing issue link on the line following this TODO
  ]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]
target-version = "py311"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"app/tests/**/*.py" = [
    "S101", # Use of `assert` detected
]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.flake8-gettext]
function-names = ["_", "gettext", "ngettext", "ugettetxt"]

[tool.black]
line-length = 120
exclude = '''(\.git|\.hg|\.mypy_cache|\.tox|\.venv|_build|buck-out|build|dist|^.*\b(migrations)\b.*$)'''

[tool.isort]
line_length = 120
profile="black"


